//two character arrays that store bccode and ascii
char *bccode[47] = {"*", "??*", "?*<", "*?", "?", "?*?", "?**", "**", "??", "*??", "*<", "??<", "?*", "<*", "<?", "?<", "**<", "?<*", "?<?","<", "<<", "***", "**?", "*<?", "?<<", "*?<", "<??*", "<??<", "<?*?", "<?**", "<?*<", "<?<?", "<?<*", "<?<<", "<*??", "<???", "<??", "<?*", "<*?", "<**", "<*<", "<<?", "<<*", "<<<", "<?<", "<***<", " "};
char letters[47] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', ',', '\'', '?', '!', '+', '-', '*', '/', '=', ' '};
void setup() {
  Serial.begin(9600);

}
//function to convert the characters in the letters array into bccode
char* char2bcc(char c) {
  for (int i = 0; i < 47; i++) { 
    if (letters[i] == c) {
      return bccode[i];
    }
  }
}
//function that converts strings of ascii into bccode
String ascii2bcc(String s) {
  String word = "";
  int stringLength = s.length();
  if (stringLength == s.length()) {
    for (int i = 0; i < s.length(); i++) {
      word += char2bcc(s[i]);
      if (s[i + 1] != ' ' && s[i] != ' ' && i != s.length() - 1) { 
        word += '~';//adds a ~ to seperate each letter in bccode
      }
    }
    return word; //returns the completed string
  }
}
//function to convert bccode into letters
char bcc2char(String m) {
  for (int i = 0; i < 47; i++) {
    if (m.equals(bccode[i])) { //checks to see if m is equal to the same postion as i in bc
      return letters[i]; // returns the letter that has the same postion as the bc value
    }
  }
  return '.'; //if it cannot recognise the input it will output a '.' as an error message
}
//function to convert multiple bcc strings to ascii
String bcc2ascii(String m) {
  String temp = "";  //used to temporaily store the bcc
  String finalR = ""; //used to store the final translated message to be output
  for (int i = 0; i < m.length(); i++) {
    if (m[i] != ' ' && m[i] != '~') { //if the input is not a space or a ~ it will add it to temp
      temp += m[i];

    } else {
      char translate = bcc2char(temp); //translates the input
      finalR += translate; //adds translated value to finalR
      temp = ""; // clears temp
    }
    if (i == m.length() - 1) {
      char translate = bcc2char(temp);
      finalR += translate;
    }
  }
  return finalR; //retunrs the final message to the user
}
//Function to read and take input from the user
String promptReadln() {
  Serial.println("Enter input:");
  while (!Serial.available()) {}; //will repeatedly ask for an user input as long as the serial port is available
  return Serial.readString();
}

void loop() {

  String bcc = "";
  String ascii = "";

  int f = 0;
//while loop that will read user input and decide whether its bcc or ascii
  while (f == 0) {
    String userInput = promptReadln();
    if (userInput == "*" || userInput == "?" || userInput == "<") { //if the user input is in bcc it will perform the bcc2ascii function
      bcc = bcc2ascii(userInput);
      Serial.println(bcc);
    } else if (userInput != "*" || userInput != "?" || userInput != "<") { //if the user input isnt in bcc it will perform the ascii2bcc function
      ascii = ascii2bcc(userInput);
      Serial.println(ascii);
    }
  }
}
